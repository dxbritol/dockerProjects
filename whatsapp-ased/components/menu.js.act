const fs = require("fs");
const moment = require("moment-timezone");

const CONTEXT_PATH = "./components/context.json";
let contextos = {};

if (fs.existsSync(CONTEXT_PATH)) {
  contextos = JSON.parse(fs.readFileSync(CONTEXT_PATH));
}

function guardarContexto() {
  fs.writeFileSync(CONTEXT_PATH, JSON.stringify(contextos, null, 2));
}

function estaEnHorario() {
  const ahora = moment().tz("America/Guayaquil");
  const minutos = ahora.hour() * 60 + ahora.minute();
  const dia = ahora.day(); // Domingo = 0
  return (
    dia !== 0 &&
    ((minutos >= 720 && minutos <= 1020) || (minutos >= 1140 && minutos <= 1260))
  );
}

function inicializarMenu(client) {
  client.on("message", async (msg) => {
    const numero = msg.from;
    const texto = msg.body?.toLowerCase().trim();
    const nombre = msg._data?.notifyName || "Usuario";
    const ahora = Date.now();
    const tiempoLimite = 15 * 60 * 1000;
    const contieneSaludo = /(hola|buenas|menu|reiniciar)/i.test(texto);
    const enHorario = estaEnHorario();

    // 👋 Auto respuesta si dice gracias
    if (/(gracias|muchas gracias)/i.test(texto)) {
      await client.sendMessage(numero, "Un placer atenderte 😊");
    }

    // ⏱ Expirar contexto por inactividad
    if (contextos[numero] && ahora - contextos[numero].ultimoMensaje > tiempoLimite) {
      delete contextos[numero];
    }

    // 🔄 Reinicio manual por el agente
    if (msg.fromMe && ["un gusto", "saludos", "de nada"].includes(texto)) {
      if (contextos[numero]) {
        delete contextos[numero];
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      }
    }

    // 🚫 Sin contexto previo
    if (!contextos[numero]) {
      const nuevoContexto = {
        estado: "esperandoHumano",
        ultimoMensaje: ahora,
        vinoDelMenu: false,
        fueraHorarioMostrado: false,
        recordatorioMostrado: false
      };

      if (!enHorario && !nuevoContexto.fueraHorarioMostrado) {
        await client.sendMessage(
          numero,
          "🕒 Nuestro horario de atención es de 08h00 a 17h00 y de 19h00 a 21h00 (excepto domingos)."
        );
        nuevoContexto.fueraHorarioMostrado = true;
      }

      if (contieneSaludo) {
        nuevoContexto.estado = "inicio";
        nuevoContexto.vinoDelMenu = true;
        contextos[numero] = nuevoContexto;
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      } else {
        if (!nuevoContexto.recordatorioMostrado) {
          await client.sendMessage(
            numero,
            enHorario
              ? "✋ Recuerda escribir *menu* si deseas dejarnos tu requerimiento para una mejor atención."
              : "✋ Recuerda escribir *menu* si deseas dejarnos tu requerimiento y lo atenderemos apenas estemos disponibles."
          );
          nuevoContexto.recordatorioMostrado = true;
        }
        contextos[numero] = nuevoContexto;
        guardarContexto();
        return;
      }
    }

    const estado = contextos[numero].estado;

    // 💬 Si está en espera
    if (estado === "esperandoHumano") {
      if (contieneSaludo) {
        contextos[numero] = {
          ...contextos[numero],
          estado: "inicio",
          ultimoMensaje: ahora,
          vinoDelMenu: true
        };
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      }

      if (!contextos[numero].recordatorioMostrado && !contextos[numero].vinoDelMenu) {
        contextos[numero].recordatorioMostrado = true;
        contextos[numero].ultimoMensaje = ahora;
        guardarContexto();
        return client.sendMessage(
          numero,
          enHorario
            ? "✋ Recuerda escribir *menu* si deseas dejarnos tu requerimiento para una mejor atención."
            : "✋ Recuerda escribir *menu* si deseas dejarnos tu requerimiento y lo atenderemos apenas estemos disponibles."
        );
      }

      return;
    }

    // 🔄 Actualizar tiempo
    contextos[numero].ultimoMensaje = ahora;
    contextos[numero].recordatorioMostrado = false;
    guardarContexto();

    // 📌 Menú principal
    if (estado === "inicio") {
      if (texto === "1" || texto.includes("soporte")) {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          vinoDelMenu: true,
          fueraHorarioMostrado: contextos[numero].fueraHorarioMostrado,
          recordatorioMostrado: false
        };
        guardarContexto();

        const mensaje = enHorario
          ? "⚙️  *Por favor ayúdanos con lo siguiente:*\nDescribe el problema *detalladamente*.\nAdjunta *una sola captura* clara.\nNecesitaremos la *plataforma* y *usuario* que tiene el inconveniente.\n\n👨🏻‍💻👩🏻‍💻Un asesor de soporte se comunicará contigo en breve.\n\nEscribe *menu* si necesitas seleccionar otra opción."
          : "🕒 Fuera de horario. Puedes escribirnos tu problema y lo atenderemos apenas estemos disponibles.";

        return client.sendMessage(numero, mensaje);
      }

      if (texto === "2" || texto.includes("ventas")) {
        contextos[numero] = {
          estado: "ventas",
          ultimoMensaje: ahora,
          vinoDelMenu: true,
          fueraHorarioMostrado: contextos[numero].fueraHorarioMostrado,
          recordatorioMostrado: false
        };
        guardarContexto();

        return client.sendMessage(numero, "🛒 ¿Qué servicio deseas contratar?");
      }

      if (texto === "3" || texto.includes("renovar")) {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          vinoDelMenu: true,
          fueraHorarioMostrado: contextos[numero].fueraHorarioMostrado,
          recordatorioMostrado: false
        };
        guardarContexto();

        return client.sendMessage(
          numero,
          "🔄 Asegurate de que el servicio que deseas renovar se encuentre *disponible*.\nSi estas seguro del valor a *cancelar*, nos ayudas con el comprobante de pago.\n\n👨🏻<200d>💻👩🏻<200d>💻Un asesor confirmará que todo este correcto y renovará el servicio, en otro caso se comunicará en breve.\n\nEscribe *menu* si necesitas seleccionar otra opción."
        );
      }

      if (texto === "4" || texto.includes("asesor")) {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          vinoDelMenu: true,
          fueraHorarioMostrado: contextos[numero].fueraHorarioMostrado,
          recordatorioMostrado: false
        };
        guardarContexto();

        return client.sendMessage(
          numero,
          "👤 Un asesor te atenderá lo más pronto posible.\n\nGracias por tu paciencia."
        );
      }

      return client.sendMessage(
        numero,
        "Por favor selecciona una opción válida:\n1️⃣ Soporte\n2️⃣ Ventas\n3️⃣ Renovar\n4️⃣ Chatear con un asesor"
      );
    }

    // 📌 Ventas
    if (estado === "ventas") {
      if (texto.length > 3) {
        const mensaje = enHorario
          ? `Gracias por tu interés en: *"${msg.body}"*. Un asesor de ventas te contactará pronto.\n\nEscribe *menu* si necesitas seleccionar otra opción.`
          : `Gracias por tu interés en: *"${msg.body}"*.\n🕒 Nuestro horario de ventas es de 08h00 a 17h00 y de 19h00 a 21h00. Te atenderemos apenas estemos disponibles.\n\nEscribe *menu* si necesitas seleccionar otra opción.`;

        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          vinoDelMenu: true,
          fueraHorarioMostrado: contextos[numero].fueraHorarioMostrado,
          recordatorioMostrado: false
        };
        guardarContexto();

        return client.sendMessage(numero, mensaje);
      } else {
        return client.sendMessage(
          numero,
          "Por favor, indícanos qué servicio deseas contratar."
        );
      }
    }
  });
}

function generarMensajeMenu(nombre) {
  return `Hola *${nombre}*, te saluda *AsedinfoBot* 🤓\n¿En qué te podemos ayudar?\n\n` +
    `1️⃣ Soporte\n` +
    `2️⃣ Ventas\n` +
    `3️⃣ Renovar un servicio contratado\n` +
    `4️⃣ Chatear con un asesor\n\n` +
    `Responde con el número de la opción.`;
}

module.exports = { inicializarMenu };
