const fs = require("fs");
const moment = require("moment-timezone");

const CONTEXT_PATH = "./components/context.json";
let contextos = {};

if (fs.existsSync(CONTEXT_PATH)) {
  contextos = JSON.parse(fs.readFileSync(CONTEXT_PATH));
}

function guardarContexto() {
  fs.writeFileSync(CONTEXT_PATH, JSON.stringify(contextos, null, 2));
}

function estaEnHorario() {
  const ahora = moment().tz("America/Guayaquil");
  const minutosTotales = ahora.hour() * 60 + ahora.minute();
  return (
    (minutosTotales >= 480 && minutosTotales <= 1020) ||
    (minutosTotales >= 1140 && minutosTotales <= 1260)
  );
}

function inicializarMenu(client) {
  client.on("message", async (msg) => {
    const numero = msg.from;
    const texto = msg.body?.toLowerCase().trim();
    const nombre = msg._data?.notifyName || "Usuario";
    const ahora = Date.now();
    const tiempoLimite = 15 * 60 * 1000;

    // ‚è± Expira contexto tras 15 minutos
    if (contextos[numero] && ahora - contextos[numero].ultimoMensaje > tiempoLimite) {
      delete contextos[numero];
    }

    // üü® Reinicio manual por el agente
    if (msg.fromMe && ["un gusto", "saludos", "de nada"].includes(texto)) {
      if (contextos[numero]) {
        delete contextos[numero];
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      }
    }

    const estado = contextos[numero]?.estado;
    const contieneSaludo = /(hola|buenas|buenos |buen |menu|reiniciar)/i.test(texto);

    // üü© Cliente sin contexto
    if (!contextos[numero]) {
      if (contieneSaludo) {
        contextos[numero] = {
          estado: "inicio",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      } else {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          avisado: true,
          vinoDelMenu: false
        };
        guardarContexto();
        return client.sendMessage(numero, "‚úã Escribe *menu* si necesitas ayuda.");
      }
    }

    // üö´ Cliente en estado esperandoHumano
    if (estado === "esperandoHumano") {
      if (contieneSaludo) {
        contextos[numero] = {
          estado: "inicio",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();
        return client.sendMessage(numero, generarMensajeMenu(nombre));
      }

      // Si nunca pas√≥ por el men√∫ y a√∫n no fue avisado
      if (!contextos[numero].avisado && !contextos[numero].vinoDelMenu) {
        contextos[numero].avisado = true;
        contextos[numero].ultimoMensaje = ahora;
        guardarContexto();
        return client.sendMessage(numero, "‚úã Escribe *menu* si necesitas ayuda.");
      }

      return; // Silencio total si ya vino del men√∫ o ya fue avisado
    }

    // ‚úÖ Actualizar timestamp
    contextos[numero].ultimoMensaje = ahora;
    contextos[numero].avisado = false;
    guardarContexto();

    // üìå Estado: INICIO
    if (estado === "inicio") {
      if (texto === "1" || texto.includes("soporte")) {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();

        const mensaje = estaEnHorario()
          ? "‚öôÔ∏è  Por favor necesitamos que nos ayudes con lo siguiente:\n" +
		"1. Describe lo m√°s detallado posible el problema, para poder identificarlo.\n" +
		"2. Adjunta solo una captura, lo m√°s clara posible.\nEsto nos ayudar√° a mejorar nuestra atenci√≥n\n\n" +
		"Un asesor de soporte se comunicar√° contigo en breve.\n" +
		"Gracias por tu paciencia.\n\nEscribe *menu* si necesitas ayuda."
          : "üïí Nuestro horario de soporte es de 08h00 a 17h00 y de 19h00 a 21h00. Te atenderemos tan pronto estemos disponibles.";

        return client.sendMessage(numero, mensaje);
      }

      if (texto === "2" || texto.includes("ventas")) {
        contextos[numero] = {
          estado: "ventas",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();

        return client.sendMessage(numero, "üõí ¬øQu√© servicio deseas contratar?");
      }

      if (texto === "3" || texto.includes("renovar")) {
        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();

        return client.sendMessage(
          numero,
          "‚ôªÔ∏è Adjunta tu comprobante de pago y procederemos a renovar tu servicio.\n\nEscribe *menu* si necesitas ayuda."
        );
      }

      return client.sendMessage(
        numero,
        "Por favor selecciona una opci√≥n v√°lida:\n1Ô∏è‚É£ Soporte\n2Ô∏è‚É£ Ventas\n3Ô∏è‚É£ Renovar servicio"
      );
    }

    // üìå Estado: VENTAS
    if (estado === "ventas") {
      if (texto.length > 3) {
        const mensaje = estaEnHorario()
          ? `Gracias por tu inter√©s en: *"${msg.body}"*. Un asesor de ventas se comunicar√° contigo pronto.\n\nEscribe *hola* si necesitas volver al men√∫.`
          : "Nuestro horario de ventas es de 08h00 a 17h00 y de 19h00 a 21h00. Te atenderemos apenas estemos disponibles.\n\nEscribe *hola* si necesitas volver al men√∫.";

        client.sendMessage(numero, mensaje);

        contextos[numero] = {
          estado: "esperandoHumano",
          ultimoMensaje: ahora,
          avisado: false,
          vinoDelMenu: true
        };
        guardarContexto();
        return;
      } else {
        return client.sendMessage(
          numero,
          "Por favor, ind√≠canos qu√© servicio deseas contratar."
        );
      }
    }
  });
}

// üìã Generador del men√∫ principal
function generarMensajeMenu(nombre) {
  return `Hola *${nombre}*, te saluda *AsedinfoBot* ü§ì\n¬øEn qu√© te podemos ayudar?\n\n` +
         `1Ô∏è‚É£ Soporte\n` +
         `2Ô∏è‚É£ Ventas\n` +
         `3Ô∏è‚É£ Renovar un servicio contratado\n\n` +
         `Responde con el n√∫mero de la opci√≥n.`;
}

module.exports = { inicializarMenu };
